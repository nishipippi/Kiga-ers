/* apps/web/src/components/PaperCard.module.css */
/* 論文カードの基本的な内部要素の見た目に関するスタイル */

.cardContentWrapper { /* カードのコンテンツ全体のラッパー */
  background-color: #FFFFFF;
  border-radius: 0.75rem; /* カードの角丸 */
  padding: 1rem; /* カード内部のパディング */
  text-align: left;
  border: 1px solid rgba(42, 63, 84, 0.1); /* カードの境界線 */
  display: flex;
  flex-direction: column;
  overflow: hidden; /* スクロール可能なコンテンツ以外のはみ出しを防ぐ */
  height: 100%; /* 親要素の高さに追従 (親コンテナで高さを指定することを想定) */
  box-sizing: border-box; /* パディングとボーダーをwidth/heightに含める */
}

/* ライブラリページなどでカード全体をクリック可能にする場合の追加スタイル */
.clickableCard {
  cursor: pointer;
  /* ホバーエフェクトは呼び出し側のCSSで定義 (例: library.module.css の .libraryGridItemContainer:hover) */
}


.cardScrollableContent {
  flex-grow: 1; /* 利用可能なスペースを埋めるように伸びる */
  overflow-y: auto; /* 内容が多い場合にスクロール可能にする */
  padding-bottom: 0.5rem; /* スクロール終端の余白 */
  position: relative; /* z-indexや内部のsticky要素の基準 */
}

.cardTitle {
  font-size: 1rem;
  line-height: 1.4;
  font-weight: 600;
  margin-bottom: 0.6rem;
  color: #2A3F54; /* プロジェクトの主要テキストカラー */
  position: sticky; /* スクロールしてもタイトルが見えるように */
  top: -1rem; /* 親要素のpaddingを考慮して相殺 */
  background-color: rgba(255, 255, 255, 0.97); /* スクロール時に下のコンテンツが透けないように */
  backdrop-filter: blur(5px); /* 背景をぼかす（モダンブラウザ向け） */
  padding-top: 1rem; /* sticky時の背景のためのスペース */
  padding-bottom: 0.4rem; /* タイトル自体の下部パディング */
  margin-top: -1rem; /* 親要素のpaddingを相殺 */
  z-index: 20; /* 他のスクロールコンテンツより手前に表示 */
}
@media (min-width: 640px) {
  .cardTitle {
    font-size: 1.125rem; /* 少し大きい画面ではフォントも少し大きく */
  }
}

.cardAuthors {
  font-size: 0.75rem;
  line-height: 1.3;
  color: rgba(42, 63, 84, 0.75);
  margin-bottom: 0.6rem;
  font-style: italic;
}

.cardDates {
  font-size: 0.65rem;
  line-height: 1;
  color: rgba(42, 63, 84, 0.6);
  margin-bottom: 1rem; /* 次のセクションとの間隔 */
}
.cardDates span + span::before {
  content: '/';
  margin-left: 0.375rem;
  margin-right: 0.375rem;
}

.aiSummarySection {
  margin-top: 0.5rem; /* 上の要素との間隔 */
  margin-bottom: 1.25rem; /* 下の要素との間隔 */
  padding: 0.8rem;
  background-color: rgba(42, 63, 84, 0.04);
  border-radius: 0.5rem;
  border: 1px solid rgba(42, 63, 84, 0.08);
}

.aiSummaryHeader {
  font-weight: 600;
  font-size: 0.875rem;
  color: #2A3F54;
  margin-bottom: 0.4rem;
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.aiSummaryHeaderText {
  display: flex;
  align-items: center;
}

.aiSummaryHeaderText svg {
  height: 1rem;
  width: 1rem;
  margin-right: 0.3rem;
  color: #c44597; /* AI関連のアクセントカラー */
}

.generateButton {
  background-color: #c44597;
  color: white;
  font-size: 0.65rem;
  font-weight: 700;
  padding: 0.25rem 0.6rem;
  border-radius: 9999px;
  box-shadow: 0 1px 2px rgba(0,0,0,0.05);
  transition: background-color 0.2s;
  border: none;
  cursor: pointer;
}
.generateButton:hover {
  background-color: #a7377e;
}

.aiSummaryText, .aiSummaryPlaceholder, .aiSummaryLoading {
  font-size: 0.8rem;
  color: #3e5064;
  line-height: 1.65;
}
.aiSummaryPlaceholder {
  color: rgba(42, 63, 84, 0.55);
  font-style: italic;
}
.aiSummaryLoading {
  color: rgba(42, 63, 84, 0.75);
  font-style: italic;
  animation: pulsePaperCard 1.8s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

.abstractSection {
  margin-bottom: 1rem;
}

.abstractSummary {
  cursor: pointer;
  font-size: 0.8rem;
  font-weight: 500;
  color: rgba(42, 63, 84, 0.85);
  list-style: none;
  display: flex;
  align-items: center;
  transition: color 0.2s;
  padding: 0.25rem 0;
}
.abstractSummary::-webkit-details-marker { display: none; } /* Safariのデフォルトマーカーを非表示 */
.abstractSummary:hover {
  color: #2A3F54;
}
.abstractSummary svg {
  height: 0.9rem;
  width: 0.9rem;
  margin-right: 0.25rem;
  transition: transform 0.2s;
}
.abstractSection[open] .abstractSummary svg {
  transform: rotate(90deg);
}

.abstractContent {
  color: rgba(42, 63, 84, 0.95);
  margin-top: 0.5rem;
  font-size: 0.8rem;
  background-color: rgba(42, 63, 84, 0.03);
  padding: 0.75rem;
  border-radius: 0.375rem;
  border: 1px solid rgba(42, 63, 84, 0.07);
  line-height: 1.65;
}

.categoriesContainer {
  display: flex;
  flex-wrap: wrap;
  gap: 0.4rem;
  margin-bottom: 0.5rem; /* ボタンエリアとの間隔 */
}

.categoryTag {
  background-color: rgba(42, 63, 84, 0.08);
  color: rgba(42, 63, 84, 0.85);
  font-size: 0.65rem;
  font-weight: 500;
  padding: 0.15rem 0.5rem;
  border-radius: 9999px;
}

.actionButtonsOuterContainer { /* ボタン群全体をラップするコンテナ */
  position: sticky; /* スクロールコンテンツの最下部に固定 */
  bottom: -1rem; /* 親要素のpaddingを考慮して相殺 */
  background-color: rgba(255, 255, 255, 0.97);
  backdrop-filter: blur(5px);
  padding-top: 0.6rem; /* ボタンと上の境界線との間隔 */
  padding-bottom: 1rem; /* 親要素のpaddingを考慮 */
  margin-top: auto; /* flex-grow:1 の要素がある場合、これを下端に押しやる */
  margin-left: -1rem; /* 親要素のpaddingを相殺 */
  margin-right: -1rem; /* 親要素のpaddingを相殺 */
  margin-bottom: -1rem; /* 親要素のpaddingを相殺 */
  z-index: 15; /* スクロールコンテンツより手前、タイトルよりは下など調整 */
  border-top: 1px solid rgba(42, 63, 84, 0.1); /* 上のコンテンツとの境界線 */
}

.actionButtonsInnerContainer { /* ボタンを横並びにするための直接の親 */
  display: flex;
  justify-content: center; /* デフォルトは中央揃え */
  align-items: center;
  gap: 0.75rem; /* ボタン間の間隔 */
  padding-left: 1rem; /* ボタンエリア自体の左右パディング */
  padding-right: 1rem;
}
/* ホームページなどで左右にボタンを配置したい場合は、
   呼び出し側でこの要素に justify-content: space-around/space-between を適用するクラスを追加 */


.pcActionButton {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem 0.8rem;
  border-radius: 9999px; /* 丸いボタン */
  font-weight: 600;
  font-size: 0.75rem; /* ボタン内テキストのサイズ */
  border: 2px solid transparent; /* 透明なボーダー（ホバーやアクティブ時に色を付けるため） */
  cursor: pointer;
  transition: all 0.2s ease-out;
  gap: 0.3rem; /* アイコンとテキストの間隔 */
  background-color: transparent; /* 通常時は透明 */
  line-height: 1; /* アイコンとテキストの垂直中央揃えのため */
  white-space: nowrap; /* ボタン内テキストが折り返さないように */
}
.pcActionButtonIcon {
  height: 1.1rem;
  width: 1.1rem;
}
.pcActionButtonText {
  display: inline;
}

.pcDislikeButton {
  border-color: #7cb342; /* 緑系 */
  color: #7cb342;
}
.pcDislikeButton:hover {
  background-color: rgba(124, 179, 66, 0.1);
  transform: scale(1.03);
}

.pcLikeButton {
  border-color: #e91e63; /* ピンク系 */
  color: #e91e63;
}
.pcLikeButton:hover {
  background-color: rgba(233, 30, 99, 0.1);
  transform: scale(1.03);
}
.pcLikeButton.liked { /* いいね済みの場合のスタイル */
  background-color: #e91e63;
  color: white;
}
.pcLikeButton.liked:hover {
  background-color: #c2185b; /* いいね済みホバー時の濃い色 */
}

.pdfButtonWrapper {
  flex-grow: 0; /* 中央配置のため、flexコンテナ内で伸びないように */
  display: flex;
  justify-content: center;
}
.pdfButton {
  display: inline-flex;
  align-items: center;
  background-color: #37474f; /* 濃いグレー系 */
  color: white;
  font-size: 0.75rem;
  line-height: 1;
  font-weight: 600;
  padding: 0.45rem 0.9rem;
  border-radius: 9999px;
  box-shadow: 0 3px 10px rgba(55, 71, 79, 0.2);
  transition: all 0.2s ease-out;
  border: none;
  cursor: pointer;
}
.pdfButton:hover {
  background-color: #263238; /* ホバー時の濃い色 */
  transform: scale(1.04);
}
.pdfButton svg {
  height: 0.9rem;
  width: 0.9rem;
  margin-right: 0.25rem;
}
.pdfPlaceholder { /* PDFボタンがない場合の高さ合わせ */
  /* ボタンの高さ: padding(上下) + line-height(font-size) + border(上下) */
  /* この例では (0.45rem * 2) + 0.75rem (line-heightでfont-sizeと同じと仮定) */
  height: calc(0.9rem + 0.45rem * 2); /* アイコンの高さ + padding */
  min-width: 80px; /* ボタンのおおよその最小幅 */
}


.pcRemoveButton { /* ライブラリからの削除ボタン */
  border-color: #d32f2f; /* 赤系 */
  color: #d32f2f;
}
.pcRemoveButton:hover {
  background-color: rgba(211, 47, 47, 0.1);
  transform: scale(1.03);
}

/* カード内部のローディングアニメーション */
@keyframes pulsePaperCard {
  0%, 100% { opacity: 1; }
  50% { opacity: .6; }
}

/* スワイプ時のフィードバックオーバーレイ用のスタイルは、
   page.module.css など、実際にスワイプが発生するページのCSSで定義し、
   PaperCardコンポーネントに feedbackColor のクラス名として渡すことを推奨します。
   これにより、PaperCard自体はフィードバックの色に依存しなくなります。
*/
/* 例: page.module.css
.feedbackLike { background-color: rgba(236, 72, 153, 0.3); }
.feedbackDislike { background-color: rgba(132, 204, 22, 0.3); }
*/